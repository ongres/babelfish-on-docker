FROM ubuntu:focal as base
LABEL org.opencontainers.image.authors="emanuel@ongres.com"

ARG MAX_JOBS
ARG RELEASE

ENV MAX_JOBS=${MAX_JOBS:-2}
ENV RELEASE=${RELEASE:-BABEL_1_0_0__PG_13_4}
ENV CODE_PATH=/opt/babelfishpg/
# ENV EXT_CODE_PATH=/opt/babelfishpg_ext

ENV PREFIX=/opt/target/babelfishpg
ENV ANTLR_RUNTIME=/opt/antlr4

# ENV PG_SRC=/opt/babelfishpg/
ENV PG_CONFIG=${PREFIX}/bin/pg_config
ENV ANTLR4_RUNTIME_INCLUDE_DIR=/usr/local/include/antlr4-runtime/

ENV ANTLR4_JAVA_BIN=/usr/bin/java

ENV PG_SRC=${CODE_PATH}
# ENV cmake=$(which cmake)


RUN set -ex; \
	apt update

RUN set -ex ; \
    DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
    build-essential flex libxml2-dev libxml2-utils\
    libxslt-dev libssl-dev \
    libreadline-dev zlib1g-dev libldap2-dev libpam0g-dev gettext  \
    uuid uuid-dev cmake lld apt-utils pkg-config libossp-uuid-dev gnulib bison git

RUN set -ex ; \
    DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
    xsltproc icu-devtools libicu66 libicu-dev gawk curl

RUN set -ex ; \
    DEBIAN_FRONTEND=noninteractive \
    apt install -y openjdk-8-jre openssl \
        libssl-dev python-dev libpq-dev \
        pkgconf unzip libutfcpp-dev gnupg

# SQL Server Tooling dependencies
# Reference: https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-ver15#ubuntu
RUN set -ex ; \
    curl -L https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    curl -L https://packages.microsoft.com/config/ubuntu/20.04/prod.list | tee /etc/apt/sources.list.d/msprod.list && \
    apt update && ACCEPT_EULA=Y apt install -y mssql-tools unixodbc-dev

ENV PATH="${PREFIX}/bin:/opt/mssql-tools/bin/:${PATH}"

RUN rm -rf /var/lib/apt/lists/*; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;


# RUN curl -L https://www.antlr.org/download/antlr-4.8-complete.jar --output ${ANTLR_EXECUTABLE}

# Compiling and installing antlr runtime
ENV ANTLR_EXECUTABLE=/usr/local/lib/antlr-4.9.2-complete.jar

RUN curl https://www.antlr.org/download/antlr-4.9.2-complete.jar \
        --output ${ANTLR_EXECUTABLE} && chmod +x ${ANTLR_EXECUTABLE}


RUN curl https://www.antlr.org/download/antlr4-cpp-runtime-4.9.2-source.zip \
        --output /opt/antlr4-cpp-runtime-4.9.2-source.zip && \
        unzip -d ${ANTLR_RUNTIME} /opt/antlr4-cpp-runtime-4.9.2-source.zip

WORKDIR ${ANTLR_RUNTIME}

RUN mkdir build && cd build && \
    cmake .. -D ANTLR_JAR_LOCATION=${ANTLR_EXECUTABLE} \
        -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_DEMO=True && \
    make && make install

# RUN git clone https://github.com/babelfish-for-postgresql/postgresql_modified_for_babelfish.git ${CODE_PATH} 
# RUN git clone https://github.com/babelfish-for-postgresql/babelfish_extensions.git ${EXT_CODE_PATH}

## Support for ANTLR 4.8.
## There is an ongoing work to have broader version support for ANTLR.
# RUN cp /usr/lib/x86_64-linux-gnu/libantlr4-runtime.so* ${PREFIX}/lib
ENV add=
ADD ${RELEASE}.zip /opt/${RELEASE}.zip

RUN unzip -d ${CODE_PATH} /opt/${RELEASE}.zip

WORKDIR ${CODE_PATH}

RUN ./configure CFLAGS="${CFLAGS:--Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic}" \
  --prefix=${PREFIX} \
  --enable-debug \
  --with-ldap \
  --with-libxml \
  --with-pam \
  --with-uuid=ossp \
  --enable-nls \
  --with-libxslt \
  --with-icu \
  --with-extra-version=" Babelfish for PostgreSQL"

# Compilation
RUN make clean && make DESTDIR=${PREFIX} -j ${MAX_JOBS} 
#world-bin

# Install core
RUN make install

RUN cp /usr/local/lib/libantlr4-runtime.so.4.9.2 ${PREFIX}/lib

RUN ["/usr/bin/bash", "-c", "cmake=$(which cmake) ANTLR4_RUNTIME_LIBRARIES=/usr/include/antlr4-runtime ; cd ${CODE_PATH}/contrib/babelfishpg_tsql/antlr ; cmake . "]

RUN cmake=$(which cmake) ANTLR4_RUNTIME_LIBRARIES=/usr/include/antlr4-runtime make install && cd contrib/ && make install

# tmp_install
# Build all the extensions
RUN cd contrib/ && make && make install && cd ..

# # Regression Tests
# RUN make DESTDIR=${PREFIX}/tmp_install EXTRA_REGRESS_OPTS=--debug -j ${MAX_JOBS} check





# WORKDIR ${EXT_CODE_PATH}

# ENV USE_PGXS=1


## [WIP] Support for ANTLR 4.8
# XXX: current make is not taking in account this environment settings 
#      ANTLR_EXECUTABLE=${PREFIX}/antlr-4.8-complete.jar ANTLR4_RUNTIME_LIBRARIES=/usr/include/antlr4-runtime


# RUN PG_CONFIG=${PG_CONFIG} PG_SRC=${CODE_PATH} cmake=$(which cmake) ANTLR4_RUNTIME_LIBRARIES=/usr/include/antlr4-runtime ; \
#     for EXT in babelfishpg_common babelfishpg_money babelfishpg_tds babelfishpg_tsql ; \
#     do \
#         cd ${EXT_CODE_PATH}/contrib/${EXT} ; \
#         make clean && make && make install ; \
#     done


FROM base AS babelfish
COPY --from=base ${PREFIX}/ /usr/local/ /opt/mssql-tools/bin/

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="${PREFIX}/bin:${PATH}"
ENV PGDATA="/var/lib/postgresql/data"
ENV DOCKER_ENTRYPOINT="/usr/local/bin/entrypoint-ubuntu-focal.sh"

RUN apt-get update && \
    apt-get install -y libxml2 libreadline8 tzdata libldap-2.4-2 libpython2.7 libxslt1.1 libossp-uuid16 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create postgres user
RUN useradd postgres  && usermod -a -G postgres postgres

# Sample default ready for Babelfish to run
RUN set -eux; \
    sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    sed -ri "s+#?shared_preload_libraries.*+shared_preload_libraries = 'babelfishpg_tds'+g" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    sed -i -e "\$ababelfishpg_tds.listen_addresses = '*'"  "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    grep -F "listen_addresses = '*'" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    grep -F "shared_preload_libraries = 'babelfishpg_tds'" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    grep -F "babelfishpg_tds.listen_addresses = '*'" "${PREFIX}/share/postgresql/postgresql.conf.sample";

RUN mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"

COPY entrypoint-ubuntu-focal.sh /usr/local/bin/

RUN chmod -R 0750 "${PREFIX}/share" && \
    chown postgres: ${DOCKER_ENTRYPOINT} && \
    chmod +x ${DOCKER_ENTRYPOINT} && \
    chown -R postgres: ${PREFIX} 

WORKDIR "${PREFIX}/bin/"

USER postgres

STOPSIGNAL SIGINT

EXPOSE 1433
EXPOSE 5432

ENTRYPOINT ["/usr/local/bin/entrypoint-ubuntu-focal.sh"]

CMD ["postgres"]
